#!/usr/bin/php
<?php
/**
 * @package   check_ctxhypervisor_health
 * @copyright check_ctxhypervisor_health contributors
 * @license   GNU Affero General Public License (https://www.gnu.org/licenses/agpl-3.0.de.html)
 * parts of this software (class Xenapi - see below) is @copyright by Andy Goodwin with a custom license.
 * please check the related code further down.
 */

 // our global $context and the params array
 $context = array();
 $params = array();

 // get all params from the command line call
 $params = getParams();

// get all the important data from the Hypervisor
$context['system'] = getXenserverDetails($params['xshosturl'], $params['xsuser'], $params['xspassword'], $params['warning'], $params['critical']);
$context['system']['is_poolmaster'] = $context['is_poolmaster'];
$exit_code = get_exit_code($context['system']);

// all data should be there, let's render our data
renderOutput($context['system'], $params, $exit_code);

/**
 * this function is the core functionality. it connects to the XenApi class and handles all the data collection.
 * 
 * @param string $xshosturl the hypervisors url to name or ip
 * @param string $login the username we use to connect to the hypervisor api, most likely 'root'
 * @param string $password the password from our user
 * @param int $warning some default threshold for warning states
 * @param int $critical threshold for critical states
 * 
 * @return array $details a large associative array with all the collected data 
 * 
 */

function getXenserverDetails($xshosturl, $login, $password, $warning = 90, $critical = 95) {
    $details = array();

    $xenserver = new XenApi($xshosturl, $login = 'root', $password);

    //get all hosts from the conneted pool. Unfortunately we can only connect to the poolmaster..
    $hosts = $xenserver->host__get_all();

    // lets also check all guests or we won't get the not running guests..
    $poolguests = $xenserver->VM__get_all();

    foreach ($hosts as $host) {
        $record = $xenserver->host__get_record($host);

        //Hostname or IP identical?
        if (('https://' . $record['name_label']) == $xshosturl || ('https://' . $record['address']) == $xshosturl) {
            $details['host']['name'] = $record['hostname'];
            $details['host']['vendor'] = $record['bios_strings']['system-manufacturer'];
            $details['host']['model'] = $record['bios_strings']['system-product-name'];
            $details['host']['sn'] = $record['bios_strings']['system-serial-number'];
            $details['host']['version'] = $record['software_version']['product_brand'] . ' ' . $record['software_version']['product_version'];
            $details['host']['cpu'] = $record['cpu_info']['modelname'] . "(" . $record['cpu_info']['socket_count'] . " Sockets - ". $record['cpu_info']['cpu_count'].  " CPU)";
                               
            // get the PBDs & SR details
            foreach ($record['PBDs'] as $pbd) {
                $pbd_list = $xenserver->PBD__get_record($pbd);
                $sr = $xenserver->SR__get_record($pbd_list['SR']);

                // ignore udev devices such as dvd rom or usb drives..
                if ($sr['type'] != 'udev') {
                    $total = round($sr['physical_size'] / 1024 / 1024 / 1024,2);
                    // size < 1 is probably the xs tools file, we can safely ignore
                    if ($total < 1)
                        continue;

                    $used = round($sr['physical_utilisation'] / 1024 / 1024 / 1024,2);
                    $usage = round($used * 100 / $total, 2);

                    $details['storage'][] = array(
                        'label' => $sr['name_label'],
                        'type' => $sr['type'],
                        'total' => $total,
                        'used' => $used,
                        'free' => $total - $used,
                        'usage' => $usage,
                        'exit_code' => $usage > $critical ? 2 :($usage > $warning ? 1 : 0),
                    );
                }
            }
                
            //metrics -> Memory usage
            $metric = $xenserver->host_metrics__get_record($record['metrics']);
                
            $memtotal = ceil(round($metric['memory_total'] / 1024 / 1024 / 1024,2, PHP_ROUND_HALF_UP));
            $memfree = round($metric['memory_free'] / 1024 / 1024 / 1024,2);
            $memused = $memtotal - $memfree;
            $usage = round($memused * 100 / $memtotal, 2);

             $details['memory'] = array(
                'total' => $memtotal,
                'used' => $memused,
                'free' => $memtotal - $memused,
                'usage' => $usage,
                'exit_code' => $usage > $critical ? 2 : ($usage > $warning ? 1 : 0)
            );

            // get the resident VMs from our hypervisor
            foreach ($record['resident_VMs'] as $guests) {
                $rec = $xenserver->VM__get_record($guests);

                if ( !$rec['is_control_domain']) {
                    $details['guests'][] = array(
                        'name' => $rec['name_label'],
                        'powerstate' => $rec['power_state'],
                    );
                }
            }
        }
    }
        
    // get all guests from the pool
    foreach ($poolguests as $pool_guests) {
        $rec = $xenserver->VM__get_record($pool_guests);
        if ($rec['is_a_template'] == '1' || $rec['is_a_snapshot'] == '1' || $rec['power_state'] == 'Running')
            continue;

        $details['guests'][] = array(
            'name' => $rec['name_label'],
            'powerstate' => $rec['power_state'],
        );
    }
	return $details;
}


/**
* Determine the exit code of the device, highest value wins..
* @param $context array
*/
function get_exit_code($context) {
	$codes = array_value_recursive('exit_code',$context);

    if (count($codes) > 1)
		return max($codes);

	elseif ($codes == 1)
		return $codes;

	else
        return 0;
}

/**
* set final exit code of the device, highest value wins..
* @param $array array
*/
function set_exit_code($array) {
	$codes = array_value_recursive('exit_code', $array);
	return max($codes);
}

/**
 * Get all values from specific key in a multidimensional array
 *
 * @param string $key key(s) of value you wish to extract
 * @param array  $arr where you want
 *
 * @return null|string|array
 */
function array_value_recursive($key, array $arr)
{
    $val = array();
    array_walk_recursive($arr, function ($v, $k) use ($key, &$val) {
        if ($k == $key) array_push($val, $v);
    });
    return count($val) > 1 ? $val : array_pop($val);
}

/**
 * format the text input with Thruk color codes.
 * @param string $txt the text we wan't to colorize
 * @param int $exit_code the exit code, so we know about ok, warning and critical
 * 
 * @return string
 */
function formatStatus ($txt, $exit_code = 4)
{
	$green = '#66bb6a';
	$red = '#f0666c';
	$orange = '#ffe57b';
	$grey = '#5f6268';
	$white = '#fff';
	
	if ($exit_code == 0)
		$output =  '<span style="background-color:'. $green . '; color: ' . $white . '; padding: 1px 3px;">'. $txt . '</span>';
	
	elseif ($exit_code == 1)
		$output =  '<span style="background-color:'. $orange . '; color: ' . $grey . '; padding: 1px 3px;">'. $txt . '</span>';
	
	elseif ($exit_code == 2)
		$output =  '<span style="background-color:'. $red . '; color: ' . $white . '; padding: 1px 3px;">'. $txt . '</span>';
	else
		$output = $txt;

	return $output;
}

/**
 * Render the Data including performance graphs
 * @param array $data
 * @param int $exit_code
 */
function renderOutput($data, $params, $exit_code) {

    // everything is fine
   if ($exit_code == 0) {
        echo "OK: Hypervisor " . $data['host']['name'] . " (" . $data['host']['vendor'] . " - ". $data['host']['model'] . " - SN:" . $data['host']['sn'] . ") is healthy.\n";
    }

    // houston, we have a problem..
    elseif ($exit_code == 1) {
        echo "WARNING: Hypervisor " . $data['host']['name'] . " (" . $data['host']['vendor'] . " - ". $data['host']['model'] . " - SN:" . $data['host']['sn'] . ") reported problems. please check details...\n";
    }
    
    // oooops, this should better not happen for this host..
    elseif ($exit_code == 2) {
        echo "CRITICAL: Hypervisor " . $data['host']['name'] . " (" . $data['host']['vendor'] . " - ". $data['host']['model'] . " - SN:" . $data['host']['sn'] . ") reported problems. please check details...\n";
    }

    // some basic system information like vendor, model & serial number..
    echo "Hypervisor Version: " . $data['host']['version'] . "\n";
    echo "Pool role: " . ($data['is_poolmaster'] == true ? "Master" : "Slave") . "\n";
    echo "Vendor: " . $data['host']['vendor'] . "\n";
    echo "Model: " . $data['host']['model'] . "\n";
    echo "SN: " . $data['host']['sn'] . "\n";
    echo "CPU: " . $data['host']['cpu'] . "\n\n";

    // CPU usage
    echo "Memory Usage: " . formatStatus($data['memory']['usage'] .  "%", $data['memory']['exit_code']) . " (Free: " . $data['memory']['free'] . " GB - Used: " . $data['memory']['used'] . " GB - Total: ". $data['memory']['total'] . " GB)\n";


    foreach ($data['storage'] as $storage) {
        // local storage
        if ($storage['type'] == 'ext' || $storage['type'] == 'lvm')
            echo $storage['label'] . " - Usage: " . formatStatus($storage['usage'] . "%", $storage['exit_code']) . " (Free: " . $storage['free'] . " GB - Used: " . $storage['used'] . " GB - Total: " .$storage['total'] . " GB)\n";
        elseif ($data['is_poolmaster'] == true)
            echo $storage['label'] . " - Usage: " . formatStatus($storage['usage'] . "%", $storage['exit_code']) . " (Free: " . $storage['free'] . " GB - Used: " . $storage['used'] . " GB - Total: " .$storage['total'] . " GB)\n";
    }

    // VMs
    if (!empty($data['guests'] )) {
        echo "\n<b>Guests on this host:</b>\n";

        foreach ($data['guests'] as $guest) {
            if ($guest['powerstate'] == 'Running')
                echo '<span style="color: #66bb6a;">&#9679;</span> ' .  $guest['name'] . "\n";
        
            // VMs not running only for the poolmaster..
            if ($guest['powerstate'] != 'Running' &&  $data['is_poolmaster'] == true)
                echo '<span style="color: #f0666c;">&#9679;</span> ' .  $guest['name'] . "\n";
        }
    }

    echo '| \'memory usage\'=' . $data['memory']['usage'] . ';' . $params['warning'] . ';' . $params['critical'] . ';0;100';

    foreach ($data['storage'] as $storage) {
        $w = round($storage['total'] * $params['warning'] / 100, 2);
        $c = round($storage['total'] * $params['critical'] / 100, 2);
        if ($storage['type'] == 'ext' || $storage['type'] == 'lvm')
           echo ' \'' . $storage['label'] . '\'=' . $storage['used'] . ';'. $w . ';' . $c .';0;' . $storage['total']. "\n";
        elseif ($data['is_poolmaster'] == true)
            echo ' \'' . $storage['label'] . '\'=' . $storage['used'] . ';'. $w . ';' . $c .';0;' . $storage['total']. "\n";
    }
}

/**
 * get all the important parameters from the command line and place them into an array
 * @return array $params
 */
function getParams() {

    $options = getopt("h:u:p:w::c::", array("host:", "user:", "password:", "warning::", "critical::"));

    // no options defined? 
    if(count($options) == 0) {
        echo "parameter -h || --host (Hostname from the Hypervisor) is missing \n";
        echo "parameter -u || --user is missing \n";
        echo "parameter -p || --password is missing \n";
    }
    if(!isset($options['host']) && !isset($options['h'])) {   
	    echo "parameter -h || --host (Hostname from the Hypervisor) is missing \n";
	    exit(0);
    }

    if(!isset($options['user']) && !isset($options['u'])) {
	    echo "parameter -u || --user is missing \n";
	    exit(0);
    }

    if(!isset($options['password']) && !isset($options['p'])) {
	    echo "parameter -p || --password is missing \n";
	    exit(0);
    }

    $params['xshost'] = isset($options['host']) ? $options['host'] : $options['h'];
    $params['xsuser'] = isset($options['user']) ? $options['user'] : $options['u'];
    $params['xspassword'] = isset($options['password']) ? $options['password'] : $options['p'];
    $params['warning'] = isset($options['warning']) ? $options['warning'] : isset($options['w']) ? $options['w'] : 90;
    $params['critical'] = isset($options['critical']) ? $options['critical'] : isset($options['c']) ? $options['c']: 95;
    $params['is_poolmaster'] = false;
    $params['xshosturl'] = 'https://' . $params['xshost'];
    
    return $params;
}




/*
 *    PHP XenAPI v1.0
 *    a class for XenServer API calls
 *
 *    Copyright (C) 2010 Andy Goodwin <andyg@unf.net>
 *    slightly modified 2019 by Thorsten Eurich <thorsten@eurich.de>
 *
 *    This class requires xml-rpc, PHP5, and curl.
 *
 *    Permission is hereby granted, free of charge, to any person obtaining 
 *    a copy of this software and associated documentation files (the 
 *    "Software"), to deal in the Software without restriction, including 
 *    without limitation the rights to use, copy, modify, merge, publish, 
 *    distribute, sublicense, and/or sell copies of the Software, and to 
 *    permit persons to whom the Software is furnished to do so, subject to 
 *    the following conditions:
 *
 *    The above copyright notice and this permission notice shall be included 
 *    in all copies or substantial portions of the Software.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
 *    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 *    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
class XenApi {
    
    private $_url;

    private $_session_id;
    private $_user;
    private $_password;

    function __construct ($url, $user, $password) {

        global $context;

        $r = $this->xenrpc_request($url, $this->xenrpc_method('session.login_with_password', array($user, $password, '1.3')));
print_r($r);
        if (is_array($r) && $r['Status'] == 'Success') 
		{
            $this->_session_id = $r['Value'];
            $this->_url = $url;
            $this->_user = $user;
            $this->_password = $password;
            $context['is_poolmaster'] = true;
        } else 
		{
			if ($r['ErrorDescription'][0] == 'HOST_IS_SLAVE')
			{
				$ra = $this->xenrpc_request($r['ErrorDescription'][1], $this->xenrpc_method('session.login_with_password', array($user, $password, '1.3')));
				if (is_array($ra) && $ra['Status'] == 'Success') 
				{
					$this->_session_id = $ra['Value'];
					$this->_url = $r['ErrorDescription'][1];
					$this->_user = $user;
                    $this->_password = $password;
                    $context['is_poolmaster'] = false;
				}
			}
			else
			{
				echo "API failure.  (" . implode(' ', $r['ErrorDescription']) . ")\n";  exit;
			}
        }
    }

    function __call($name, $args) {
        if (!is_array($args)) {
            $args = array();
        }
        list($mod, $method) = explode('__', $name, 2);
        $ret = $this->xenrpc_parseresponse($this->xenrpc_request($this->_url, 
                  $this->xenrpc_method($mod . '.' . $method, array_merge(array($this->_session_id), $args))));
        return $ret;
    }

    function xenrpc_parseresponse($response) {
        if (!@is_array($response) && !@$response['Status']) {
            echo "API failure.  (500)\n";  exit;
        } else {
            if ($response['Status'] == 'Success') {
               $ret = $response['Value'];
            } else {
               if ($response['ErrorDescription'][0] == 'SESSION_INVALID') {
                   $r = $this->xenrpc_request($url, $this->xenrpc_method('session.login_with_password', 
                               array($this->_user, $this->_password, '1.3')));
                   if (!is_array($r) && $r['Status'] == 'Success') {
                       $this->_session_id = $r['Value'];
                   } else {
                       echo "API failure.  (session)\n";  exit;
                   }
               } else {
                   echo "API failure.  (" . implode(' ', $response['ErrorDescription']) . ")\n";  exit;
               }
            }
        }
        return $ret;
    }

    function xenrpc_method($name, $params) {
        $ret = xmlrpc_encode_request($name, $params);

        return $ret;
    }

    function xenrpc_request($url, $req) {
        $headers = array('Content-type: text/xml', 'Content-length: ' . strlen($req));

        $ch = curl_init($url);

        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');

        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
        curl_setopt($ch, CURLOPT_TIMEOUT, 60);

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); 
        curl_setopt($ch, CURLOPT_PROXY, '');
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        curl_setopt($ch, CURLOPT_POSTFIELDS, $req); 

        $resp = curl_exec($ch);
        curl_close($ch); 

        $ret = xmlrpc_decode($resp);

        return $ret;
        }
}
