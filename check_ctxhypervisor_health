#!/usr/bin/php
<?php

$options = getopt("h:u:p:w::c::", array("host:", "user:", "password:", "warning::", "critical::"));

// no options defined? 
if(count($options) == 0)
{
			
}
if(!isset($options['host']) && !isset($options['h']))
{
	echo "parameter -h || --host (Hostname of the snmp target) is missing \n";
	exit(0);
}

$xshost = isset($options['host']) ? $options['host'] : $options['h'];
$xsuser = isset($options['user']) ? $options['user'] : $options['u'];
$xspassword = isset($options['password']) ? $options['password'] : $options['p'];
$warning = isset($options['warning']) ? $options['warning'] : isset($options['w']) ? $options['w'] : 90;
$critical = isset($options['critical']) ? $options['critical'] : isset($options['c']) ? $options['c']: 95;

$context = array();
$xshost = 'https://' . $xshost;


$context['system'] = getXenserverDetails($xshost, $xsuser, $xspassword, $warning, $critical);

print_r($context);

/*
 *    PHP XenAPI v1.0
 *    a class for XenServer API calls
 *
 *    Copyright (C) 2010 Andy Goodwin <andyg@unf.net>
 *    slightly modified 2019 by Thorsten Eurich <thorsten@eurich.de>
 *
 *    This class requires xml-rpc, PHP5, and curl.
 *
 *    Permission is hereby granted, free of charge, to any person obtaining 
 *    a copy of this software and associated documentation files (the 
 *    "Software"), to deal in the Software without restriction, including 
 *    without limitation the rights to use, copy, modify, merge, publish, 
 *    distribute, sublicense, and/or sell copies of the Software, and to 
 *    permit persons to whom the Software is furnished to do so, subject to 
 *    the following conditions:
 *
 *    The above copyright notice and this permission notice shall be included 
 *    in all copies or substantial portions of the Software.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
 *    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 *    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
class XenApi {
    private $_url;

    private $_session_id;
    private $_user;
    private $_password;

    function __construct ($url, $user, $password) {
        $r = $this->xenrpc_request($url, $this->xenrpc_method('session.login_with_password', array($user, $password, '1.3')));

        if (is_array($r) && $r['Status'] == 'Success') 
		{
            $this->_session_id = $r['Value'];
            $this->_url = $url;
            $this->_user = $user;
            $this->_password = $password;
        } else 
		{
			if ($r['ErrorDescription'][0] == 'HOST_IS_SLAVE')
			{
				$r2 = $this->xenrpc_request($r['ErrorDescription'][1], $this->xenrpc_method('session.login_with_password', array($user, $password, '1.3')));
				if (is_array($r2) && $r2['Status'] == 'Success') 
				{
					$this->_session_id = $r2['Value'];
					$this->_url = $r['ErrorDescription'][1];
					$this->_user = $user;
					$this->_password = $password;
				}
			}
			else
			{
				echo "API failure.  (" . implode(' ', $r['ErrorDescription']) . ")\n";  exit;
			}
        }
    }

    function __call($name, $args) {
        if (!is_array($args)) {
            $args = array();
        }
        list($mod, $method) = explode('__', $name, 2);
        $ret = $this->xenrpc_parseresponse($this->xenrpc_request($this->_url, 
                  $this->xenrpc_method($mod . '.' . $method, array_merge(array($this->_session_id), $args))));
        return $ret;
    }

    function xenrpc_parseresponse($response) {
        if (!@is_array($response) && !@$response['Status']) {
            echo "API failure.  (500)\n";  exit;
        } else {
            if ($response['Status'] == 'Success') {
               $ret = $response['Value'];
            } else {
               if ($response['ErrorDescription'][0] == 'SESSION_INVALID') {
                   $r = $this->xenrpc_request($url, $this->xenrpc_method('session.login_with_password', 
                               array($this->_user, $this->_password, '1.3')));
                   if (!is_array($r) && $r['Status'] == 'Success') {
                       $this->_session_id = $r['Value'];
                   } else {
                       echo "API failure.  (session)\n";  exit;
                   }
               } else {
                   echo "API failure.  (" . implode(' ', $response['ErrorDescription']) . ")\n";  exit;
               }
            }
        }
        return $ret;
    }

    function xenrpc_method($name, $params) {
        $ret = xmlrpc_encode_request($name, $params);

        return $ret;
    }

    function xenrpc_request($url, $req) {
        $headers = array('Content-type: text/xml', 'Content-length: ' . strlen($req));

        $ch = curl_init($url);

        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');

        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
        curl_setopt($ch, CURLOPT_TIMEOUT, 60);

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); 

        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        curl_setopt($ch, CURLOPT_POSTFIELDS, $req); 

        $resp = curl_exec($ch);
        curl_close($ch); 

        $ret = xmlrpc_decode($resp);

        return $ret;
        }
}

function getXenserverDetails($xshost, $login, $password, $warning = 90, $critical = 95)
{
    $details = array();


		$xenserver = new XenApi($xshost, $login = 'root', $password);
          
        //get all hosts from the conneted pool. Unfortunately we can only connect to the poolmaster..
        $hosts = $xenserver->host__get_all();

		foreach ($hosts as $host)
		{
		    $record = $xenserver->host__get_record($host);

            //Hostname or IP identical?
            if ('https://' . ($record['name_label']) == $xshost || 'https://' . ($record['address'] == $xshost))
            {
               $details['host']['vendor'] = $record['bios_strings']['system-manufacturer'];

                $details['host']['model'] = $record['bios_strings']['system-product-name'];
                $details['host']['sn'] = $record['bios_strings']['system-serial-number'];
                $details['host']['version'] = $record['software_version']['product_brand'] . ' ' . $record['software_version']['product_version'];
                $details['host']['cpu'] = $record['cpu_info']['modelname'] . "(" . $record['cpu_info']['socket_count'] . " Sockets - ". $record['cpu_info']['cpu_count'].  " CPU)";
                         
                //PBDs & SR details
                foreach ($record['PBDs'] as $pbd)
			    {
                    $pbd_list = $xenserver->PBD__get_record($pbd);
                    $sr = $xenserver->SR__get_record($pbd_list['SR']);

                    // check only local storage
                    if ($sr['type'] == 'ext' || $sr['type'] == 'lvm')
                    {
                        $total = round($sr['physical_size'] / 1024 / 1024 / 1024,2);
                        $used = round($sr['physical_utilisation'] / 1024 / 1024 / 1024,2);
                        $usage = round($used * 100 / $total, 2);

                        $details['storage'][] = array(
                            'label' => $sr['name_label'],
                            'total' => $total,
                            'used' => $used,
                            'free' => $total - $used,
                            'usage' => $usage,
                            'exit_code' => $usage > $critical ? 2 :($usage > $warning ? 1 : 0),
                        );
                       
                    }
                }

                //metrics -> Memory usage
                $metric = $xenserver->host_metrics__get_record($record['metrics']);
                
                $memtotal = ceil(round($metric['memory_total'] / 1024 / 1024 / 1024,2, PHP_ROUND_HALF_UP));
                $memfree = round($metric['memory_free'] / 1024 / 1024 / 1024,2);
                $memused = $memtotal - $memfree;
                $usage = round($memused * 100 / $memtotal, 2);

                $details['memory'] = array(
                    'total' => $memtotal,
                    'used' => $memused,
                    'free' => $memtotal - $memused,
                    'usage' => $usage,
                    'exit_code' => $usage > $critical ? 2 : ($usage > $warning ? 1 : 0)
                );

                //VMS
                foreach ($record['resident_VMs'] as $guests)
			    {
				    $rec = $xenserver->VM__get_record($guests);
				    if ( !$rec['is_control_domain'])
				    {
                         if (('https://'. $record['name_label']) == $xshost)
					        $details['guests'][] = array(
						        'guest_name' => $rec['name_label'],
						        'power_state' => $rec['power_state'],
					    );
                    }
                }
            }
        }
	
	return $details;
}


/**
* Determine the exit code of the device, highest value wins..
*/
function get_exit_code($context)
{
	$codes = array_value_recursive('exit_code',$context);

    if (count($codes) > 1)
		return max($codes);

	elseif ($codes == 1)
		return $codes;

	else
        return 0;
}

function set_exit_code($array)
{
	$codes = array_value_recursive('exit_code', $array);
	return max($codes);
}
/**
 * Get all values from specific key in a multidimensional array
 *
 * @param string $key key(s) of value you wish to extract
 * @param array  $arr where you want
 *
 * @return null|string|array
 */
function array_value_recursive($key, array $arr)
{
    $val = array();
    array_walk_recursive($arr, function ($v, $k) use ($key, &$val) {
        if ($k == $key) array_push($val, $v);
    });
    return count($val) > 1 ? $val : array_pop($val);
}
	